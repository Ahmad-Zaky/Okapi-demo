#%RAML 1.0 
title: OKAPI Core API
version: v1
baseUri: https://okapi.io
mediaType:  application/json
types: !include types.raml
#resourceTypes:
#traits:

# The following are a set of APIs that module web service must accept/consume
# to allow sling environment to orchestrate it
#
# This version assumes that a module instance may be shared by multiple
# tenants, e.g we have a global set of module instances (aka Seb's doc)

# TODO we will most likely need a web service to list and browse module types

/_/modules:
  post:
    description: Creates an instance of a given module type, includes all
      necessary mechanics to put the module into operation (launching 
      a process, binding to a port, setting up routing)
     # most likely we will want to read some initial configuration
    body:
      application/json:
        schema: ModuleDescriptor
    responses:
      201:
        headers:
         Location:
          description: URI to the created module instance

  /{module_id}:
    get:
      description: Retrieve information about the module instance
      responses:
        200:
          body:
            application/json:
              schema: ModuleDescriptor
    delete:
      description: Remove module instance from operation 
        (shutdown process etc)
      responses:
        204:

           
/_/tenants:
  post:
    description: create a new tenant
    body:
      appllication/json:
        schema: TenantDescriptor
    responses:
      201:
        description: tenant has been created
        headers:
          Location:
            description: URI to the created tenant

  /{tenant_id}:
    get:
      description: retrieve tenant
      responses:
        200:
          body:
            application/json:
              schema: TenantDescriptor
    delete:
      description: remove tenant

    /modules:
      get:
        description: Map of module instances accessible by the tenant
        responses:
          200:
            body:
              application/json:
                schema: TenantModuleDescriptor[]
      post:
        description: Link a module instance to the specified tenant

        /{module_tenant_id}:
          get:
            description: look up tenant-module mapping
            responses:
              200:
                body:
                  application/json:
                    schema: TenantModuleDescriptor
          delete:
            description: remove tenant-module registration
