#%RAML 0.8
title: Okapi Core API
version: 0.1
baseUri: https://okapi.io
## mediaType:  application/json
schemas:
  - ModuleDescriptor: !include ModuleDescriptor.json
  - TenantDescriptor: !include TenantDescriptor.json
  - TenantModuleDescriptor: !include TenantModuleDescriptor.json
  - TenantModules: !include TenantModules.json

#resourceTypes:
#traits:

# The following are a set of APIs that module web service must accept/consume
# to allow okapi environment to orchestrate it
#
# This version assumes that a module instance may be shared by multiple
# tenants, e.g. we have a global set of module instances

# TODO we will most likely need a web service to list and browse module types

/_/modules:
  post:
    description: Creates an instance of a given module type, includes all
      necessary mechanics to put the module into operation (launching
      a process, binding to a port, setting up routing)
     # most likely we will want to read some initial configuration
    body:
      application/json:
        schema: ModuleDescriptor
    responses:
      201:
        headers:
          Location:
            description: URI to the created module instance
        body:
          application/json:
            schema: ModuleDescriptor
  /{module_id}:
    get:
      description: Retrieve information about the module instance
      responses:
        200:
          body:
            application/json:
              schema: ModuleDescriptor
    put:
      description: Update the module instance.
      responses:
        200:
          body:
            application/json:
              schema: ModuleDescriptor
    delete:
      description: Remove module instance from operation
        (shutdown process etc)
      responses:
        204:

/_/tenants:
  post:
    description: create a new tenant
    body:
      application/json:
        schema: TenantDescriptor
    responses:
      201:
        description: tenant has been created
        headers:
          Location:
            description: URI to the created tenant
        body:
          application/json:
            schema: TenantDescriptor
      400:
        description: Bad Request
        body:
          text/plain
  get:
    description: list all tenants
    responses:
      200:
        description: list of tenant in a brief format
        body:
          application/json:
            schema: TenantModules
  /{tenant_id}:
    get:
      description: retrieve tenant
      responses:
        200:
          body:
            application/json:
              schema: TenantDescriptor
        404:
          description: Not Found
          body:
            text/plain:
    put:
      description: update tenant
      body:
        application/json:
          schema: TenantDescriptor
      responses:
        200:
          body:
            application/json:
              schema: TenantDescriptor
        400:
          description: Bad Request
          body:
            text/plain
        404:
          description: Not Found
          body:
            text/plain
    delete:
      description: remove tenant
      responses:
        204:

    /modules:
      get:
        description: Map of module instances accessible by the tenant
        responses:
          200:
            body:
              application/json:
                schema: TenantModules
      post:
        description: Link a module instance to the specified tenant
        responses:
          201:
            body:
              application/json:
                schema: TenantModuleDescriptor

      /{module_tenant_id}:
        get:
          description: look up tenant-module mapping
          responses:
            200:
              body:
                application/json:
                  schema: TenantModuleDescriptor
        delete:
          description: remove tenant-module registration
          responses:
            204:

/_/health:
  get:
    description: health status
    responses:
      200:
        description: guess what
